# You can also run this workflow from your console:
# ```shell
# cd sdk
# gh workflow run "update-replica-version.yml" -f replicaVersionLatestOrCustom=custom -f customReplicaVersion=ab2a4dd61895d77981cfd4d24f2b49ce5594573a
# ```

name: "chore: Update replica"
on: 
  workflow_dispatch:
    inputs:
      replicaVersionLatestOrCustom:
        description: 'Use the latest replica version, or provide custom revision'
        type: choice
        default: 'latest'
        options:
        - latest
        - custom
      customReplicaVersion:
        description: 'Commit SHA from dfinity/ic repo or Elect Replica Version from https://dashboard.internetcomputer.org/releases'
        default: "required if 'custom' was selected, otherwise leave as is"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  IC_RELEASES_API: "https://ic-api.internetcomputer.org/api/v3/subnet-replica-versions?limit=50&offset=0"
  # When getting Rust dependencies, retry on network error:
  CARGO_NET_RETRY: 10
  # Use the local .curlrc
  CURL_HOME: .

jobs:
  update-replica:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set replica version to latest
      if: ${{ github.event.inputs.replicaVersionLatestOrCustom == 'latest' }}
      run: echo "REPLICA_VERSION=$(curl -s "${{ env.IC_RELEASES_API }}" | jq -r '.data[0].replica_version_id')" >> $GITHUB_ENV

    - name: Set replica version to custom
      if: ${{ github.event.inputs.replicaVersionLatestOrCustom == 'custom' }}
      run: echo "REPLICA_VERSION=${{ github.event.inputs.customReplicaVersion }}" >> $GITHUB_ENV

    - name: Install Nix
      uses: cachix/install-nix-action@v21
      with:
        nix_path: nixpkgs=channel:nixos-unstable

    - name: Install niv (dependency manager for Nix projects)
      run: nix-env -i niv -f '<nixpkgs>'

    - name: Update packages in nix/sources.json
      run: niv update

    - name: Update replica to version ${{ env.REPLICA_VERSION }}
      run: scripts/update-replica.sh ${{ env.REPLICA_VERSION }}

    - name: Configure git users
      run: |
        git config author.email "${{ github.event.sender.id }}+${{ github.event.sender.login }}@users.noreply.github.com"
        git config author.name "${{ github.event.sender.login }}"
        git config committer.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config committer.name "GitHub Actions Bot"
        git config user.email "${{ github.event.sender.id }}+${{ github.event.sender.login }}@users.noreply.github.com"
        git config user.name "${{ github.event.sender.login }}"

    - name: Create new git branch, create new commit, and push the branch
      run: |
        git checkout -b chore-update-replica-${{ env.REPLICA_VERSION }}
        git add .
        git commit -m "chore: update replica version to ${{ env.REPLICA_VERSION }}"
        git push origin chore-update-replica-${{ env.REPLICA_VERSION }}

    - name: Create Pull Request, with CHANGELOG.md entry suggestion
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.NIV_UPDATER_TOKEN }} # act on behalf of https://github.com/dfinity-bot 
        script: .github/workflows/update.replica-version--open-pr.js
